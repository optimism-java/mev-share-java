plugins {
	id 'java-library'
	id 'jacoco'
	id 'com.diffplug.spotless' version '6.20.0'
	id 'maven-publish'
	id "io.github.gradle-nexus.publish-plugin" version "1.3.0"
	id 'signing'
	id "net.ltgt.errorprone" version "3.1.0"
}

group = 'me.grapebaba'
version = '0.1.1'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'com.squareup.okhttp3:okhttp:4.11.0'
	implementation 'com.squareup.okhttp3:okhttp-sse:4.11.0'

	api 'org.web3j:core:4.10.2'

	implementation 'org.slf4j:slf4j-api:2.0.7'
	implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'

	implementation 'org.apache.commons:commons-lang3:3.13.0'
	errorprone("com.google.errorprone:error_prone_core:2.18.0")

	testImplementation platform('org.junit:junit-bom:5.9.1')
	testImplementation 'org.junit.jupiter:junit-jupiter'
	testImplementation 'org.apache.logging.log4j:log4j-slf4j2-impl:2.20.0'
	testImplementation 'io.github.cdimascio:dotenv-java:3.0.0'
}

sourceSets.test.java {
	srcDirs += "$projectDir/example"
}

test {
	useJUnitPlatform()
	testLogging {
		events "passed", "skipped", "failed"
	}
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	dependsOn test

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					"net/flashbots/models/**"
			])
		}))
	}

	reports {
		csv.required = true
	}
}

jacocoTestCoverageVerification {
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					"net/flashbots/models/**"
			])
		}))
	}

	violationRules {
		rule {
			limit {
				minimum = 0.0
			}
		}
	}
}

check {
	dependsOn += jacocoTestCoverageVerification
}

tasks.withType(Test).configureEach {
	def outputDir = reports.junitXml.outputLocation
	jvmArgumentProviders << ({
		[
				"-Djunit.platform.reporting.open.xml.enabled=true",
				"-Djunit.platform.reporting.output.dir=${outputDir.get().asFile.absolutePath}"
		]
	} as CommandLineArgumentProvider)
}

javadoc {
	if (JavaVersion.current().isJava9Compatible()) {
		options.addBooleanOption('html5', true)
	}
}

java {
	withJavadocJar()
	withSourcesJar()
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

spotless {
	format 'misc', {
		// define the files to apply `misc` to
		target '*.gradle', '*.md', '.gitignore'

		// define the steps to apply to those files
		trimTrailingWhitespace()
		indentWithTabs() // or spaces. Takes an integer argument if you don't like 4
		endWithNewline()
	}
	java {

		palantirJavaFormat()
		formatAnnotations()
		importOrder('java|javax', '\\#')
		removeUnusedImports()
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {

			from components.java

			pom {
				name = rootProject.name
				description = 'Client library for Flashbots MEV-share Matchmaker.'
				url = 'https://github.com/optimism-java/mev-share-java'

				licenses {
					license {
						name = 'MIT License'
					}
				}
				developers {
					developer {
						id = 'grapebaba'
						name = 'Kai Chen'
						email = '281165273grape@gmail.com'
					}
				}
				scm {
					connection = 'scm:git:git://github.com/optimism-java/' + rootProject.name + '.git'
					developerConnection = 'scm:git:ssh://github.com/optimism-java/' + rootProject.name + '.git'
					url = 'https://github.com/optimism-java/' + rootProject.name
				}
			}
		}
	}
	repositories {
		maven {
			name = "GitHubPackages"
			url = "https://maven.pkg.github.com/optimism-java/" + rootProject.name
			credentials {
				username = System.getenv("GITHUB_ACTOR")
				password = System.getenv("GITHUB_TOKEN")
			}
		}
	}
}

signing {
	sign publishing.publications.mavenJava
	def signingKey = findProperty("signingKey")
	def signingPassword = findProperty("signingPassword")
	useInMemoryPgpKeys(signingKey, signingPassword)
}

nexusPublishing {
	repositories {
		sonatype()
	}
}

tasks.register('printSourceDirs') {
	print("$projectDir\n")
	print(sourceSets)
}

tasks.register("execute", JavaExec) {
	classpath = sourceSets.main.runtimeClasspath
	classpath += sourceSets.test.runtimeClasspath
	mainClass = mainClassName

}
